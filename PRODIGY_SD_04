#include <iostream>
#include <vector>

using namespace std;

const int SIZE = 9;

// Function to check if a number can be placed at a given position
bool isSafe(vector<vector<int>>& board, int row, int col, int num) {
    // Check if the number is not present in the current row and column
    for (int i = 0; i < SIZE; ++i) {
        if (board[row][i] == num || board[i][col] == num) {
            return false;
        }
    }

    // Check if the number is not present in the current 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(vector<vector<int>>& board) {
    for (int row = 0; row < SIZE; ++row) {
        for (int col = 0; col < SIZE; ++col) {
            // Find an empty cell
            if (board[row][col] == 0) {
                // Try placing numbers 1 to 9
                for (int num = 1; num <= 9; ++num) {
                    if (isSafe(board, row, col, num)) {
                        // Place the number if it's safe
                        board[row][col] = num;

                        // Recursively try to solve the rest of the puzzle
                        if (solveSudoku(board)) {
                            return true;
                        }

                        // If placing the number doesn't lead to a solution, backtrack
                        board[row][col] = 0;
                    }
                }

                // If no number can be placed, backtrack
                return false;
            }
        }
    }

    // If all cells are filled, the puzzle is solved
    return true;
}

// Function to print the Sudoku grid
void printSudoku(const vector<vector<int>>& board) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> sudokuGrid = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    cout << "Sudoku Puzzle:\n";
    printSudoku(sudokuGrid);

    if (solveSudoku(sudokuGrid)) {
        cout << "\nSudoku Solution:\n";
        printSudoku(sudokuGrid);
    } else {
        cout << "\nNo solution exists for the given Sudoku puzzle.\n";
    }

    return 0;
}
