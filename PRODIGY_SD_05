#include <iostream>
#include <string>
#include <curl/curl.h>

// Callback function to write data received from the web to a string
size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* output) {
    size_t total_size = size * nmemb;
    output->append((char*)contents, total_size);
    return total_size;
}

int main() {
    // Initialize libcurl
    CURL* curl;
    CURLcode res = curl_global_init(CURL_GLOBAL_DEFAULT);
    
    if (res != CURLE_OK) {
        std::cerr << "Error initializing libcurl: " << curl_easy_strerror(res) << std::endl;
        return 1;
    }

    // Create a CURL handle
    curl = curl_easy_init();

    if (!curl) {
        std::cerr << "Error creating CURL handle" << std::endl;
        curl_global_cleanup();
        return 1;
    }

    // Set the URL to be scraped
    const char* url = "https://example.com";

    // Set the write callback function
    std::string htmlContent;
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &htmlContent);

    // Set the URL to fetch
    curl_easy_setopt(curl, CURLOPT_URL, url);

    // Perform the HTTP request
    res = curl_easy_perform(curl);

    if (res != CURLE_OK) {
        std::cerr << "Error performing HTTP request: " << curl_easy_strerror(res) << std::endl;
    } else {
        // Print the fetched HTML content
        std::cout << "Fetched HTML content:\n" << htmlContent << std::endl;
    }

    // Clean up
    curl_easy_cleanup(curl);
    curl_global_cleanup();

    return 0;
}
